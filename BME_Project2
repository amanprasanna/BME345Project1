% BME 345 Project 2
% Jasmine, John, Aman, Mylah
% Due: April 15, 2025

clear
clc
close all

%% Declarations (Adkin's updated given below)

m = 75; % total mass of cyclist (kg)
g = -9.81; % gravity (m/s^2)
numRev = 3; % number of revolutions

% Conversions
in2m = 0.0254; % Converts inches to meters

% Bike info
seatHeight = 15*in2m; % height from crank to seat (m)
seatLength = 17*in2m; % horizontal distance from crank to seat (m)
m2 = 0.5; % pedal mass (kg)
h2 = 1*in2m; % pedal height (m)

% Dimensions
r1 = sqrt(seatHeight^2+seatLength^2);
r2 = 4*in2m;
r3 = 21*in2m;
r4 = 19*in2m;

stemRadius = 7*10^-3; %Radius of tibial stem (m)
%Source:
% https://www.link-ortho.com/fileadmin/user_upload/Fuer_den_Arzt/Produkte/Downloads/EN/719_MIRETO_OP_RevisionOP_en_2020-09_007.pdf
stemCrossArea = 3.14 * stemRadius^2;

% Titanium Alloy (Ti-6Al-4V) Properties
E_Ti = 113.8; %Elastic Modulus (MPa)
v_Ti = 0.34; %Poisson's Ratio
G_Ti = 42.4; %Rigidity Modulus (GPa)


% Link 1 (frame) kinematics
th1 = -pi/2 - atan(seatLength/seatHeight);
om1 = 0;
al1 = 0;

% Distal Distances
thighDistal = 0.567; 
thighProximal = 0.433; 

lowerlegDistal = 0.433; 
lowerlegProximal = 0.567; 

% Link information (might not need these)
pCarbonFiber = 1600; % density of carbon fiber bikes (kg/m^3)
diameterR1 = 0.102; % diameter of frame 1 on the bike (cm to m)
lengthCrank = 0.21; % m
heightCrank = .03; %m
width = .005; %m

% F32y Given 
importF32y = xlsread("f32y.csv"); 
F32y = importF32y(:,2)';
F23y = -F32y; 
lengthF32y = length(importF32y);
duration = importF32y(end,1) - importF32y(1,1); %would prefer to use end here


% Mass of Links (kg)
m1 = 1.0; % frame mass approximation
m3 = 0.0465*m; % leg (no foot) using anthropometric table
m4 = 0.100*m; % thigh (hip to knee) using anthropometric table

% Radius of Gyration (w.r.t CoG) of Links
k3 = 0.302; %foot and leg (from anthropometric table)
k4 = 0.323; %thigh (from anthropometric table)

% Moments of Inertia (kg*m^2)
I2z = m*(lengthCrank^2 + heightCrank^2) / 12; % rectangular prism
I3 = m3*k3^2;
I4 = m4*k4^2;


% Forces Due to Gravity
F1g = m1*g; %N
F2g = m2*g; %N
F3g = m3*g; %N
F4g = m4*g; %N


% Steps 
stepSize = lengthF32y; 
minRev = pi;
maxRev = 7*pi; % (changed max here)
th2 = linspace(minRev, maxRev, stepSize); 

integerArray = numel(th2); 

% Crank Inputs if any
om2 = (maxRev - minRev) / duration; %rad/s
al2 = 0; %rad/s^2


% Guess in the form [th3 th4 om3 om4 al3 al4] with radians, not degrees
guess = [(pi/2) (pi/4) 1 1 1 1];
options = optimoptions('fsolve','Display','final'); 

%% Calculations

% Finding the th3, th4, om3, om4, al3, al4 based on initial and new guesses
for k = 1:lengthF32y
    ans = fsolve(@fourbar_rev1,guess,options,r1,r2,r3,r4,th1,th2(k),om2,al2);
    %
    % Redefine the guess as the recently solved parameters
    guess = [ans(1) ans(2) ans(3) ans(4) ans(5) ans(6)];
    %
    % Record newly calculated parameters in a vector or matrix.
    th3(k) = ans(1);
    th4(k) = ans(2);
    om3(k) = ans(3);
    om4(k) = ans(4);
    al3(k) = ans(5);
    al4(k) = ans(6);
    
end

% Finding the x and y positions and al components based on th2, th3, and th4
for k = 1:length(th2)
    r12x(k) = -(r2/2).*cos(th2(k)); % assume symmetrical pedal crank
    r12y(k) = -(r2/2).*sin(th2(k)); 
    r32x(k) = (r2/2).*cos(th2(k)); 
    r32y(k) = (r2/2).*sin(th2(k)); 
    
    r23x(k) = -(r3*lowerlegDistal).*cos(th3(k)); % lower leg cannot be divided by 2
    r23y(k) = -(r3*lowerlegDistal).*sin(th3(k)); 
    r43x(k) = (r3*lowerlegProximal).*cos(th3(k)); 
    r43y(k) = (r3*lowerlegProximal).*sin(th3(k)); 

    r34x(k) = -(r4*thighDistal).*cos(th4(k)); % thigh cannot be divided by 2 
    r34y(k) = -(r4*thighDistal).*sin(th4(k));
    r14x(k) = (r4*thighProximal).*cos(th4(k)); 
    r14y(k) = (r4*thighProximal).*sin(th4(k));

    al2x(k) = 0 - (om2^2).*(r2/2).*cos(th2(k)); 
    al2y(k) = 0 - (om2^2).*(r2/2).*sin(th2(k)); 
    
    al3x(k) = (0 - (om2^2).*(r2).*cos(th2(k))) + (-al3(k).*(r3*lowerlegDistal).*sin(th3(k)) - (om3(k)^2)*(r3*lowerlegDistal)*cos(th3(k))); 
    al3y(k) = (0 - (om2).*(r2).*sin(th2(k))) + (al3(k).*(r3*lowerlegDistal).*cos(th3(k)) - (om3(k)^2).*(r3*lowerlegDistal).*sin(th3(k)));
    
    al4x(k) = (0 - (om2^2).*(r2).*cos(th2(k))) + (-al3(k).*(r3).*sin(th3(k)) - (om3(k)^2)*(r3)*cos(th3(k))) ...
    + (-al4(k).*(r4*thighDistal).*sin(th4(k)) - (om4(k).^2)*(r4*thighDistal).*cos(th4(k))); 
    al4y(k) = (0 - (om2^2).*(r2).*sin(th2(k))) + (al3(k).*(r3).*cos(th3(k)) - (om3(k)^2).*(r3).*sin(th3(k))) ...
    + (al4(k).*(r4*thighDistal).*cos(th4(k)) - (om4(k).^2).*(r4*thighDistal).*sin(th4(k))); 

end


% Solving for the Force Components
%  F12x  F12y  F32x  TP  F23x F43x F43y F34x  F34y F14x F14y THip
for k = 1:length(al4y)
A = [1    0     1    0    0    0     0    0    0    0    0    0; 
     0    1     0    0    0    0     0    0    0    0    0    0;
-r12y(k)' r12x(k)' -r32y(k)'  1  0  0    0    0    0    0    0 0; 
     0    0     0    0    1    1     0    0    0    0    0    0;
     0    0     0    0    0    0     1    0    0    0    0    0;
     0    0     0    0  -r23y(k)' r23x(k)' -r43y(k)' r43x(k)'  0    0    0    0;
     0    0     0    0    0    0    0     1    0    1    0    0;
     0    0     0    0    0    0    0     0    1    0    1    0;
     0    0     0    0    0    0    0  -r34y(k)' r34x(k)' -r14y(k)' r14x(k)' 1;
     0    0     1    0    1    0    0     0    0    0    0    0;
     0    0     0    0    0    1    0     1    0    0    0    0;
     0    0     0    0    0    0    1     0    1    0    0    0];

% Right hand side of the equation/ known variables
b = [m2.*al2x(k) (m2.*al2y(k) - m2*g - F32y(k)) (I2z*al2 - r32x(k).*F32y(k)) massL3.*al3x(k) (massL3.*al3y(k) - massL3*g - F23y(k)) (I3.*al3(k) - r23x(k).*F23y(k)) massL4.*al4x(k) (massL4.*al4y(k) - massL4*g) (I4.*al4(k)) 0 0 0]';

F(:,k)= A\b;

end

% Solving for Knee Force Components at the Knee to Graph (F34)
FKneeParallel = F(8, :).*cos(th3) + F(9,:).*sin(th3); % force of the knee in x direction (N)
FKneePerpendicular = F(8, :).*cos(th3 + (pi/2)) + F(9,:).*sin(th3 + (pi/2)); % force of the knee in y direction (N)


%% Graph of Angle 2 vs. Torque of Pedal and Hips (ensure that this is accurate)
figure(1)
plot(th2,F(end,:),"r",th2,F(4, :),"b","LineWidth",1.5)
title("Torque at the Pedal and Hips vs. \theta_2")
xlabel("\theta_2 in radians")
ylabel("Torque (N*m)")
legend("Torque of Hips","Torque of Pedals")

%% Graph of the Force Components vs. Angle 2
figure(2)
plot(th2,FKneeParallel,"r",th2,FKneePerpendicular,"b", "LineWidth",1.5)
title("Force Components Parallel & Perpendicular to the Knee vs. \theta_2")
xlabel("\theta_2 in radians")
ylabel("Force (N)")
legend("Force Parallel to Knee","Force Perpendicular to Knee")

%% Calculating Normal/Shear/max Principal Stress on Stem
% Using the force at the knee, calculate separately the normal and shear stress in the tibial stem. Also calculate the strain.

% Assumtpions:
% normal stress along the stem is ONLY from the normal knee force
% shear stress in the stem is ONLY from the shear force at the knee

% Neglect the normal force in the horizontal direction, since the stem has a large cross-sectional area perpendicular
% to that direction. Also, you may assume no stress in the z direction (the direction perpendicular to the coronal plane). 

proxTibiaWidth = .006; %(m)
stemWidth = proxTibiaWidth/3;
stemCrossArea = pi*(stemWidth/2)^2;

normStress = FKneePerpendicular./stemCrossArea;
shearStress = FKneeParallel./stemCrossArea;
principalStress3 = 0; % 
 
normStrain = normStress./E_Ti;
shearStrain = shearStress./G_Ti;
principalStrain3 = 0;

%% Graph of the Force Components vs. Angle 2
figure(2)
plot(th2,FKneeParallel,"r",th2,FKneePerpendicular,"b", "LineWidth",1.5)
title("Force Components Parallel & Perpendicular to the Knee vs. \theta_2")
xlabel("\theta_2 in radians")
ylabel("Force (N)")
legend("Force Parallel to Knee","Force Perpendicular to Knee")

%% Graph of Normal/Shear/max Principle Stress on knee

figure(3)

% Normal plot
subplot(3,1,1)
plot(th2, normStress, 'r-',"LineWidth",1.5)
title('Normal Stress vs. \theta_2')
xlabel('\theta_2 (rad)')
ylabel('\sigma (MPa)')
legend('Normal Stress', 'Location', 'eastoutside')
grid on

% Shear plot
subplot(3,1,2)
plot(th2, shearStress, 'r-', "LineWidth",1.5)
title('Shear Stress vs. \theta_2')
xlabel('\theta_2 (rad)')
ylabel('\tau (MPa)')
legend('Shear Stress', 'Location', 'eastoutside')
grid on

% Maximum principle plot
subplot(3,1,3)
plot(th2, principalStress3, 'r-',"LineWidth",1.5)
title('Maximum Principal Stress vs. \theta_2')
xlabel('\theta_2 (rad)')
ylabel('\sigma_3 (MPa)')
legend('\sigma_3', 'Location', 'eastoutside')
grid on

% Adjust subplot spacing
set(gcf, 'Units', 'Normalized', 'OuterPosition', [0, 0.04, 1, 0.96]);
set(findall(gcf, 'Type', 'axes'), 'FontName', 'Arial', 'FontSize', 10, 'XMinorTick', 'on', 'YMinorTick', 'on')

%% Graph of Normal/Shear/max Principle Strain on knee

figure(4)

% Normal plot
subplot(3,1,1)
plot(th2, normStrain, 'r-', "LineWidth",1.5)
title('Normal Strain vs. \theta_2')
xlabel('\theta_2 (rad)')
ylabel('\epsilon_\sigma (MPa)')
legend('Normal Strain', 'Location', 'eastoutside')
grid on

% Shear plot
subplot(3,1,2)
plot(th2, shearStrain, 'r-', "LineWidth",1.5)
title('Shear Strain vs. \theta_2')
xlabel('\theta_2 (rad)')
ylabel('\gamma (MPa)')
legend('Shear Strain', 'Location', 'eastoutside')
grid on

% Maximum principle plot
subplot(3,1,3)
plot(th2, principalStrain3, 'r-', "LineWidth",1.5)
title('Maximum Principal Strain vs. \theta_2')
xlabel('\theta_2 (rad)')
ylabel('\epsilon_3 (MPa)')
legend('\epsilon_3', 'Location', 'eastoutside')
grid on

% Adjust subplot spacing
set(gcf, 'Units', 'Normalized', 'OuterPosition', [0, 0.04, 1, 0.96]);
set(findall(gcf, 'Type', 'axes'), 'FontName', 'Arial', 'FontSize', 10, 'XMinorTick', 'on', 'YMinorTick', 'on')
% Adjust subplot spacing
set(gcf, 'Units', 'Normalized', 'OuterPosition', [0, 0.04, 1, 0.96]);
set(findall(gcf, 'Type', 'axes'), 'FontName', 'Arial', 'FontSize', 10, 'XMinorTick', 'on', 'YMinorTick', 'on')
